#!/usr/bin/env python

# RSD: The reciprocal smallest distance algorithm.
#   Wall, D.P., Fraser, H.B. and Hirsh, A.E. (2003) Detecting putative orthologs, Bioinformatics, 19, 1710-1711.
# Original Author: Dennis P. Wall, Department of Biological Sciences, Stanford University.
# Author: Todd F. DeLuca, Center for Biomedical Informatics, Harvard Medical School
# Contributors: I-Hsien Wu, Computational Biology Initiative, Harvard Medical School

import argparse
import os
import shutil

import rsd
import rsd.nested


def main():

    parser = argparse.ArgumentParser(description='Compute orthologs using the reciprocal smallest distance (RSD) algorithm between the query genome and the subject genome.  See http://bioinformatics.oxfordjournals.org/content/19/13/1710 for a description of the algorithm.')
    parser.add_argument('-q', '--query-genome', required=True, help='FASTA format sequence file, with unique ids on each nameline either in the form ">id" or ">ns|id|...".')
    parser.add_argument('-s', '--subject-genome', required=True, help='FASTA format sequence file, with unique ids on each nameline either in the form ">id" or ">ns|id|...".')
    parser.add_argument('-o', '--outfile', required=True, help='File in which to write orthologs.  Orthologs are written: query_id subject_id distance.')
    parser.add_argument('-d', '--divergence', type=float, default='0.8', help='Theshold for the maximum divergence allowed between a query and subject sequence.  A number > 0 and < 1. e.g. 0.2, or 0.5.  Default is 0.8.')
    parser.add_argument('-e', '--evalue', type=float, default='1e-5', help='Theshold for the maximum BLAST e-value allowed between a query and subject sequence.  e.g. 1e-20, or 0.005.  Default is 1e-5.')
    parser.add_argument('--ids', help='Path to file containing seq ids (one per line) in query_genome for which to compute orthologs.  If you only have one or a few sequences of interest it can be much faster to limit computation to those sequences.  The default is to compute othologs for all sequences in query_genome.  The sequence ids in the file must correspond to ids on the fasta namelines of query_genome.')
    parser.add_argument('--no-blast-cache', default=False, action='store_true', help='If this option is given, blast hits will not be precomputed for every sequence in each genome.  Using this option Can be faster if computing orthologs for only a few sequences.  Consider using in conjunction with --ids.')
    parser.add_argument('--no-format', default=False, action='store_true', help='If this option is given, genome fasta files will not be formatted for blast.  This is useful if blast formatted indices already exist and are located in the same directory as the fasta files.')
    parser.add_argument('--workdir', default='.', help='Directory under which to work.  will create a subdirectory under this dir in which to write temporary files, etc.  This subdirectory will be removed when rsd finishes.  Default is "."')
    parser.add_argument('-v', '--verbose', default=False, action='store_true')
    args = parser.parse_args()

    assert args.divergence > 0.0 and args.divergence < 1.0
    assert args.evalue >= 0.0

    if args.ids:
        with open(os.path.abspath(os.path.expanduser(args.ids))) as fh:
            # one id per line.  ignore blank lines and comment lines
            ids = [i for i in (line.strip() for line in fh) if i and not i.startswith('#')] 
    else:
        ids = None
    if args.verbose:
        print 'query sequence ids:', ids

    div = str(args.divergence)
    evalue = str(args.evalue)
    outfile = os.path.abspath(os.path.expanduser(args.outfile))
    if args.verbose:
        print 'outfile:', outfile
        print 'divergence:', div
        print 'evalue:', evalue
    
    with rsd.nested.NestedTempDir(dir=os.path.abspath(os.path.expanduser(args.workdir)), nesting=0) as tmpDir:

        # format fasta files if needed.  do it in tmpDir to be clean.
        if args.no_format:
            # assume blast formatted index files coexist with the fasta files
            queryFastaPath = os.path.abspath(os.path.expanduser(args.query_genome))
            subjectFastaPath = os.path.abspath(os.path.expanduser(args.subject_genome))
            if args.verbose:
                print 'fasta files:', queryFastaPath, subjectFastaPath
        else:
            if args.verbose:
                print 'copying fasta files'
            queryFastaPath = os.path.join(tmpDir, os.path.basename(args.query_genome))
            subjectFastaPath = os.path.join(tmpDir, os.path.basename(args.subject_genome))
            if args.verbose:
                print 'fasta files:', queryFastaPath, subjectFastaPath
            shutil.copy(os.path.abspath(os.path.expanduser(args.query_genome)), queryFastaPath)
            shutil.copy(os.path.abspath(os.path.expanduser(args.subject_genome)), subjectFastaPath)
            if args.verbose:
                print 'formatting fasta files'
            rsd.formatForBlast(queryFastaPath)
            rsd.formatForBlast(subjectFastaPath)

        # print queryFastaPath, subjectFastaPath, outfile, div, evalue
        divEvalues = [(div, evalue)]

        # precompute blast hits if needed.  do it in tmpDir to be clean.
        if args.no_blast_cache: 
            getForwardHits = rsd.makeGetHitsOnTheFly(subjectFastaPath, evalue, tmpDir)
            getReverseHits = rsd.makeGetHitsOnTheFly(queryFastaPath, evalue, tmpDir)
            if args.verbose:
                print 'computing orthologs'
            divEvalueToOrthologs = rsd.computeOrthologsUsingOnTheFlyHits(queryFastaPath, subjectFastaPath, divEvalues, ids, tmpDir)
        else:
            if args.verbose:
                print 'precomuting blast hits'
            forwardHitsPath = os.path.join(tmpDir, 'query_subject.blast.hits.pickle')
            reverseHitsPath = os.path.join(tmpDir, 'subject_query.blast.hits.pickle')
            rsd.computeBlastHits(queryFastaPath, subjectFastaPath, forwardHitsPath, evalue, workingDir=tmpDir)
            rsd.computeBlastHits(subjectFastaPath, queryFastaPath, reverseHitsPath, evalue, workingDir=tmpDir)
            if args.verbose:
                print 'computing orthologs'
            divEvalueToOrthologs = rsd.computeOrthologsUsingSavedHits(queryFastaPath, subjectFastaPath, divEvalues, forwardHitsPath, reverseHitsPath, ids, tmpDir)

        if args.verbose:
            print 'writing {0} orthologs to outfile'.format(len(divEvalueToOrthologs[divEvalues[0]]))
        rsd.writeToOutfile(divEvalueToOrthologs[divEvalues[0]], outfile)


if __name__ == '__main__':
   main()

   
# last line
